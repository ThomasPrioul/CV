<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ProfileDescription" xml:space="preserve">
    <value>J'ai réalisé des applications pour PC à destination de bancs de test ainsi que des sites web et applications pour de l'assistance au dépannage des trains.
Ma compétence principale est le développement "full stack" applicatif en C#, que je pratique quotidiennement depuis 6 ans.
Ayant fait un parcours en informatique industrielle, les problèmes bas niveau et l'électronique m'intéressent également beaucoup.</value>
  </data>
  <data name="ProfileHeader" xml:space="preserve">
    <value>PROFIL</value>
  </data>
  <data name="ContactHeader" xml:space="preserve">
    <value>CONTACT</value>
  </data>
  <data name="EmailAddress" xml:space="preserve">
    <value>thomas.prioul@outlook.com</value>
  </data>
  <data name="MailToEmailAddress" xml:space="preserve">
    <value>mailto:thomas.prioul@outlook.com</value>
  </data>
  <data name="PhoneNumber" xml:space="preserve">
    <value>06 35 91 42 86</value>
  </data>
  <data name="JobTitle" xml:space="preserve">
    <value>Ingénieur informatique industrielle</value>
  </data>
  <data name="FullName" xml:space="preserve">
    <value>THOMAS PRIOUL</value>
  </data>
  <data name="ActivitiesHeader" xml:space="preserve">
    <value>CENTRES D'INTÉRÊT</value>
  </data>
  <data name="Info" xml:space="preserve">
    <value>25 ans
Français
Permis B</value>
  </data>
  <data name="ComputingActivityDescription" xml:space="preserve">
    <value>Infographisme 3D
Jeux vidéos et projets communautaires, compétitions</value>
  </data>
  <data name="MusicActivityDescription" xml:space="preserve">
    <value>Guitariste (10 ans)
Batteur (débutant)</value>
  </data>
  <data name="ComputingActivityHeader" xml:space="preserve">
    <value>Informatique</value>
  </data>
  <data name="MusicActivityHeader" xml:space="preserve">
    <value>Musique</value>
  </data>
  <data name="EducationHeader" xml:space="preserve">
    <value>FORMATION</value>
  </data>
  <data name="PolytechEducationDescription" xml:space="preserve">
    <value>En alternance à Polytech Tours
Option véhicules autonomes
Major de la section informatique industrielle</value>
  </data>
  <data name="PolytechEducationHeader" xml:space="preserve">
    <value>Ingénieur informatique industrielle</value>
  </data>
  <data name="IUTEducationHeader" xml:space="preserve">
    <value>DUT GEII</value>
  </data>
  <data name="IUTEducationDescription" xml:space="preserve">
    <value>IUT GEII de Tours</value>
  </data>
  <data name="SkillsHeader" xml:space="preserve">
    <value>COMPÉTENCES</value>
  </data>
  <data name="ComputingSkillsDescription" xml:space="preserve">
    <value>Programmation des microcontrôleurs, DSP, FPGA
Réseaux informatiques, linux et informatique embarquée
Applications pour PC et Linux embarqué
Modélisation UML, gestion de sources (git)
Support avec tickets, développement agile</value>
  </data>
  <data name="IndustrialComputingHeader" xml:space="preserve">
    <value>Informatique industrielle</value>
  </data>
  <data name="ElectronicsHeader" xml:space="preserve">
    <value>Électronique</value>
  </data>
  <data name="LanguageSkillsHeader" xml:space="preserve">
    <value>Langues</value>
  </data>
  <data name="ElectronicsSkillsDescription" xml:space="preserve">
    <value>Réalisation de schémas et routage de carte</value>
  </data>
  <data name="EnglishSkillLevel" xml:space="preserve">
    <value>Anglais niveau C1/C2
TOEIC : 990</value>
  </data>
  <data name="ExperienceHeader" xml:space="preserve">
    <value>EXPÉRIENCE PROFESSIONNELLE</value>
  </data>
  <data name="ABCPortageJobTitle" xml:space="preserve">
    <value>Chef de projet informatique</value>
  </data>
  <data name="ABCPortageJobDescription" xml:space="preserve">
    <value>Logiciel 'valise' pour les trains NAT et Régio2N :
 - Détections d'anomalies en temps réel, sur rame ou à distance
 - Affichage graphique avec dessins et couleurs
 - Retro-engineering de protocoles réseaux
 - Simplifie la localisation des pannes, système de navigation
 - Développeur principal : gestion de stagiaires, gestion des tickets et demandes client
 - Réalisé en C#/WPF et en C#/Blazor

Banc de test réseaux pour le train Régio2N :
 - Basé sur le banc NAT développé précédemment
 - Simulation de 3x plus de réseaux et équipements que sur NAT
 - Tests télédiagnostics, communication sol/bord

Simulateur de mission pour le train NAT (Île de France Mobilités) :
 - Simule le déplacement du train par émission de messages réseaux
 - Suivi du train sur une carte, ainsi qu'un plan de ligne
 - Validation des bases de données sans mobiliser de train</value>
  </data>
  <data name="SNCFJobTitle" xml:space="preserve">
    <value>Apprenti informatique industrielle</value>
  </data>
  <data name="SNCFJobDescription" xml:space="preserve">
    <value>Banc de test réseaux pour le train NAT :
 - Développement d'architecture logicielle complexe
 - Modification code source FPGA en C (processeur NIOS)
 - Simulation en temps réel d'équipements via un PC
 - Test des équipements dans leur environnement nominal
 - Réalisation de séquences (mise en service, arrêt d'urgence...)</value>
  </data>
</root>